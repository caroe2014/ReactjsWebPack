// Copyright Â© 2018-2019 Agilysys NV, LLC.  All Rights Reserved.  Confidential Information of Agilysys NV, LLC.

import fs from 'fs';
import path from 'path';
import { exec } from 'child_process';
import crypto from 'crypto';
import config from 'app.config';

const logger = config.logger.child({ component: path.basename(__filename) });

let jwtKey = process.env.onDemandJwtSigningKey;
// The following will use a platform encryption JAR to get the jwt signing key used to crack open JWTs generated by the grant-client for authentication purposes.
// eslint-disable-next-line max-len
const jwtKeyRoot = (process.env.WORKSTATION) ? path.resolve(__dirname, 'key_store' + (process.env.IS_DEV === '1' ? '/dev' : '/int')) : path.resolve(__dirname);
const DecryptJWTKey = function (data) {
  // eslint-disable-next-line max-len
  const args = Object.keys(data).reduce((a, n, i) => i === 1 ? `${a}=${data[a]} ${n}=${data[n]}` : `${a} ${n}=${data[n]}`);
  return new Promise((resolve, reject) => {
    exec(`java -jar ${path.resolve(__dirname, 'platform', `platform-encryption-${config.platformEncryptionVersion}.jar`)} ` + args,
      function (error, stdout, stderr) {
        if (stderr) {
          logger.debug('JAVA ERRORS\n', stderr);
        }
        if (error) {
          logger.fatal(error);
          reject(error);
        }
        if (stdout) {
          resolve(stdout);
        }
        reject('Empty response from JAR');
        return;
      });
  });
};
const GetJWTSigningKey = async () => {
  try {
    if (jwtKey) {
      return jwtKey;
    }
    // eslint-disable-next-line max-len
    const keyStorePassword = fs.readFileSync(path.resolve(jwtKeyRoot, 'secure-properties.keystore-password-file.txt'), 'utf8').trimRight();
    // eslint-disable-next-line max-len
    const keyPassword = fs.readFileSync(path.resolve(jwtKeyRoot, 'secure-properties.key-password-file.txt'), 'utf8').trimRight();
    jwtKey = await DecryptJWTKey({
      keyStoreType: 'JCEKS',
      keyAlias: 'aes128',
      keyStorePassword,
      keyPassword,
      keyStoreFilePath: path.resolve(jwtKeyRoot, 'secure-properties.aes-keystore.jck')
    });
    return jwtKey;
  } catch (ex) {
    // random base64 string.
    jwtKey = crypto.randomBytes(256).toString('base64');
    return jwtKey;
  }
};

export default GetJWTSigningKey;
